
module std.wide_arithmetic if endian == "little"
import span

/** Get the sign of a signed wide integer.
 *
 * @param a A pointer to the signed wide integer
 * @param a_size The number of limbs in @a a.
 * @return A limb with all bits set to '0' when positive and all bits set
 *         to '1' when negative.
 */
fn wide_sign(a : span[__builtin_limb]) -> __builtin_limb
{
    if (a.empty()) {
        return 0
    }
    return __builtin_sra(a.unsafe_last(), sizeof(__builtin_limb) * 8 - 1)
}

fn wide_get_bit(a : span[__builtin_limb], i : __builtin_size) -> __builtin_u1
{
    let limb_width = sizeof(__builtin_limb) * 8
    let limb_index = i / limb_width
    let bit_index = i % limb_width

    return (a.unsafe()[limb_index] >> bit_index) & 1
}

fn wide_set_bit(a : span[__builtin_limb], i : __builtin_size, value : __builtin_u1)
{
    let limb_width = sizeof(__builtin_limb) * 8
    let limb_index = i / limb_width
    let bit_index = i % limb_width

    let pattern = (value : __builtin_limb) << bit_index
    let mask = ~((1 : __builtin_limb) << bit_index)

    var tmp = a.unsafe()[limb_index]
    tmp &= mask
    tmp |= pattern
    a.unsafe()[limb_index] = tmp
}

/** Count significant bits of an wide integer
 *
 * This counts the number of significant bits, exclusive sign bit.
 *
 * @param a A pointer to the signed wide integer to calculate the size for.
 * @param a_size The number of limbs in the wide integer.
 * @return The number of significant bit, excluding the sign bit.
 */
fn wide_bit_width(a : span[__builtin_limb]) -> __builtin_size
{
    if (not a.empty()) {
        let sign = wide_sign(a)

        for (var i = a.size(); i != 0; --i) {
            let tmp = a.unsafe()[i - 1]
            if (tmp != sign) {
                let num_bits = i * sizeof(__builtin_limb) * 8
                return num_bits - __builtin_lcount_zero(tmp ^ sign)
            }
        }
    }

    return 0
}

fn wide_is_zero(a : span[__builtin_limb]) -> __builtin_u1
{
    for (var i = 0 : __builtin_size; i != a.size(); ++i) {
        if (a.unsafe()[i] != 0) {
            return 0
        }
    }
    return 1
}

/** Make a signed integer zero.
 *
 * @note The number will be truncated if the dst is smaller than src.
 * @note The number is sign extended if dst is larger than src.
 * @param r Destination for the copied integer.
 * @param r_size The number of limbs of the destination.
 */
fn wide_make_zero(r : span[__builtin_limb])
{
    for (var i = 0 : __builtin_size; i != r.size(); ++i) {
        r.unsafe()[i] = 0
    }
}

/** Make a copy of a signed integer.
 *
 * @note The number will be truncated if the dst is smaller than src.
 * @note The number is sign extended if dst is larger than src.
 * @param dst Destination for the copied integer.
 * @param dst_size The number of limbs of the destination.
 * @param src Source of the signed integer to be copied.
 * @param src_size The number of limbs of the source
 */
fn wide_copy(dst : span[__builtin_limb], src : span[__builtin_limb])
{
    let src_sign = wide_sign(src)

    var i = 0 : __builtin_size
    while (i != __builtin_min(src.size(), dst.size())) {
        dst.unsafe()[i] = src.unsafe()[i]
        ++i
    }

    while (i != dst_size) {
        dst.unsafe()[i] = src_sign
        ++i
    }
}

/** Invert a signed wide integers.
 *
 * @note If @a a_size is less than @a r_size, @a a will be sign extended.
 * @note If @a a_size or @a b_size is smaller than @a r_size, then @a a or @a b will be truncated.
 * @param r The result.
 * @param r_size Size of @a r.
 * @param a The left hand side
 * @param a_size Size of @a a.
 */
fn wide_inv(r : span[__builtin_limb], a : span[__builtin_limb])
{
    let a_sign = wide_sign(a)

    var i = 0 : __builtin_size
    while (i != __builtin_min(r.size(), a.size())) {
        r.unsafe()[i] = ~a.unsafe()[i]
        ++i
    }

    while (i != r_size) {
        r.unsafe()[i] = ~a_sign
        ++i
    }
}

/** Negate a signed wide integers.
 *
 * @note If @a a_size is less than @a r_size, @a a will be sign extended.
 * @note If @a a_size or @a b_size is smaller than @a r_size, then @a a or @a b will be truncated.
 * @param r The result.
 * @param r_size Size of @a r.
 * @param a The left hand side
 * @param a_size Size of @a a.
 */
fn wide_neg(r : span[__builtin_limb], a : span[__builtin_limb])
{
    let a_sign = wide_sign(a)

    var c = 1 : __builtin_u1
    var i = 0 : __builtin_size
    while (i != __builtin_min(r.size(), a.size())) {
        r.unsafe()[i], c = __builtin_add_carry(~a.unsafe()[i], 0, c)
        ++i
    }

    while (i != r_size) {
        r.unsafe()[i], c = __builtin_add_carry(~a_sign, 0, c)
        ++i
    }
}

/** AND two signed wide integers together.
 *
 * @note If @a a_size is less than @a r_size, @a a will be sign extended.
 * @note If @a b_size is less than @a r_size, @a b will be sign extended.
 * @note If @a a_size or @a b_size is smaller than @a r_size, then @a a or @a b will be truncated.
 * @param r The result.
 * @param r_size Size of @a r.
 * @param a The left hand side
 * @param a_size Size of @a a.
 * @param b The right hand side
 * @param b_size Size of @b b.
 */
fn wide_and(r : span[__builtin_limb], a : span[__builtin_limb], b : span[__builtin_limb])
{
    let a_sign = wide_sign(a)
    let b_sign = wide_sign(b)

    var i = 0 : __builtin_size
    while (i != __builtin_min(r.size(), a.size(), b.size())) {
        r.unsafe()[i] = a.unsafe()[i] & b.unsafe()[i]
        ++i
    }

    while (i != __builtin_min(r.size(), b.size())) {
        r.unsafe()[i] = a_sign & b.unsafe()[i]
        ++i
    }

    // less-than check because b might be larger than a.
    while (i < __builtin_min(r.size(), a.size())) {
        r.unsafe()[i] = a.unsafe()[i] & b_sign
        ++i
    }

    while (i != r.size()) {
        r.unsafe()[i] = a_sign & b_sign
        ++i
    }
}

/** OR two signed wide integers together.
 *
 * @note If @a a_size is less than @a r_size, @a a will be sign extended.
 * @note If @a b_size is less than @a r_size, @a b will be sign extended.
 * @note If @a a_size or @a b_size is smaller than @a r_size, then @a a or @a b will be truncated.
 * @param r The result.
 * @param r_size Size of @a r.
 * @param a The left hand side
 * @param a_size Size of @a a.
 * @param b The right hand side
 * @param b_size Size of @b b.
 */
fn wide_or(r : span[__builtin_limb], a : span[__builtin_limb], b : span[__builtin_limb])
{
    let a_sign = wide_sign(a)
    let b_sign = wide_sign(b)

    var i = 0 : __builtin_size
    while (i != __builtin_min(r.size(), a.size(), b.size())) {
        r.unsafe()[i] = a.unsafe()[i] | b.unsafe()[i]
        ++i
    }

    while (i != __builtin_min(r.size(), b.size())) {
        r.unsafe()[i] = a_sign | b.unsafe()[i]
        ++i
    }

    // less-than check because b might be larger than a.
    while (i < __builtin_min(r.size(), a.size())) {
        r.unsafe()[i] = a.unsafe()[i] | b_sign
        ++i
    }

    while (i != r_size) {
        r.unsafe()[i] = a_sign | b_sign
        ++i
    }
}

/** OR two signed wide integers together.
 *
 * @note If @a a_size is less than @a r_size, @a a will be sign extended.
 * @note If @a b_size is less than @a r_size, @a b will be sign extended.
 * @note If @a a_size or @a b_size is smaller than @a r_size, then @a a or @a b will be truncated.
 * @param r The result.
 * @param r_size Size of @a r.
 * @param a The left hand side
 * @param a_size Size of @a a.
 * @param b The right hand side
 * @param b_size Size of @b b.
 */
fn wide_xor(r : span[__builtin_limb], a : span[__builtin_limb], b : span[__builtin_limb])
{
    let a_sign = wide_sign(a)
    let b_sign = wide_sign(b)

    var i = 0 : __builtin_size
    while (i != __builtin_min(r.size(), a.size(), b.size())) {
        r.unsafe()[i] = a.unsafe()[i] ^ b.unsafe()[i]
        ++i
    }

    while (i != __builtin_min(r_size, b_size)) {
        r.unsafe()[i] = a_sign ^ b.unsafe()[i]
        ++i
    }

    // less-than check because b might be larger than a.
    while (i < __builtin_min(r_size, a_size)) {
        r.unsafe()[i] = a.unsafe()[i] ^ b_sign
        ++i
    }

    while (i != r_size) {
        r.unsafe()[i] = a_sign ^ b_sign
        ++i
    }
}


/** Inplace SLL (Shift Left Logical) a wide integer
 *
 * @param a Integer to shift
 * @param a_size Number of limbs of @a a
 * @param b Number of bits to shift
 */
fn wide_inplace_sll(a : span[__builtin_limb], b : __builtin_size)
{
    let limb_width = sizeof(__builtin_limb) * 8
    let num_limbs_to_shift = b / limb_width
    let num_bits_to_shift = b % limb_width
    let rev_num_bits_to_shift = limb_width - num_bits_to_shift

    var i = a.size()
    while (i > num_limbs_to_shift + 1) {
        let hi = a.unsafe()[i - num_limbs_to_shift - 1] << num_bits_to_shift
        let lo = a.unsafe()[i - num_limbs_to_shift - 2] >> rev_num_bits_to_shift
        a.unsafe()[i - 1] = hi | lo
        --i
    }

    if (i > num_limbs_to_shift) {
        a.unsafe()[i - 1] = a.unsafe()[i - num_limbs_to_shift - 1] << num_bits_to_shift
        --i
    }

    while (i != 0) {
        a.unsafe()[i - 1] = 0
        --i
    }
}

/** Inplace SRL (Shift Right Logical) a wide integer
 *
 * @param a Integer to shift
 * @param a_size Number of limbs of @a a
 * @param b Number of bits to shift
 */
fn wide_inplace_srl(a : span[__builtin_limb], b : __builtin_size)
{
    let limb_width = sizeof(__builtin_limb) * 8
    let num_limbs_to_shift = b / limb_width
    let num_bits_to_shift = b % limb_width
    let rev_num_bits_to_shift = limb_width - num_bits_to_shift

    var i = 0 : __builtin_size
    while (i < a.size() - num_limbs_to_shift - 1) {
        let lo = a.unsafe()[i + num_limbs_to_shift] >> num_bits_to_shift
        let hi = a.unsafe()[i + num_limbs_to_shift + 1] << rev_num_bits_to_shift
        a.unsafe()[i] = hi | lo
        ++i
    }

    if (i < a.size() - num_limbs_to_shift) {
        a.unsafe()[i] = a.unsafe()[i + num_limbs_to_shift] >> num_bits_to_shift
        ++i
    }

    while (i != a_size) {
        a.unsafe()[i] = 0
        ++i
    }
}

/** Inplace SRA (Shift Right Arithmatic) a wide integer
 *
 * @param a Integer to shift
 * @param a_size Number of limbs of @a a
 * @param b Number of bits to shift
 */
fn wide_inplace_sra(
    let a : raw_ptr[__builtin_limb],
    let a_size : __builtin_size,
    let b : __builtin_size)
{
    let sign = wide_sign(a, a_size)
    let limb_width = sizeof(__builtin_limb) * 8
    let num_limbs_to_shift = b / limb_width
    let num_bits_to_shift = b % limb_width
    let rev_num_bits_to_shift = limb_width - num_bits_to_shift

    var i = 0 : __builtin_size
    while (i < a_size - num_limbs_to_shift - 1) {
        let lo = a.unsafe()[i + num_limbs_to_shift] >> num_bits_to_shift
        let hi = a.unsafe()[i + num_limbs_to_shift + 1] << rev_num_bits_to_shift
        a.unsafe()[i] = hi | lo
        ++i
    }

    if (i < a_size - num_limbs_to_shift) {
        let lo = a.unsafe()[i + num_limbs_to_shift] >> num_bits_to_shift
        let hi = sign << rev_num_bits_to_shift
        a.unsafe()[i] = hi | lo
        ++i
    }

    while (i != a_size) {
        a.unsafe()[i] = sign
        ++i
    }
}

/** Inplace SLL (Shift Left Logical) a wide integer by 1.
 *
 * @param a Integer to shift
 * @param a_size Number of limbs of @a a
 * @param c Bit to append as the least significant bit
 */
fn wide_inplace_sll_one(
    let a : raw_ptr[__builtin_limb],
    let a_size : __builtin_size,
    let c : __builtin_u1 = 0)
    pre(a_size != 0)
{
    let limb_width = sizeof(__builtin_limb) * 8
    let num_bits_to_shift = b % limb_width

    var i = a_size
    while (i > 1) {
        let hi = a.unsafe()[i - num_limbs_to_shift - 1] << 1
        let lo = a.unsafe()[i - num_limbs_to_shift - 2] >> (limb_width - 1)
        a[i - 1] = hi | lo
        --i
    }

    let hi = a.unsafe()[i - num_limbs_to_shift - 1] << 1
    a.unsafe()[i - 1] = hi | c
}

/** Add two signed wide integers together.
 *
 * @note If @a a_size is less than @a r_size, @a a will be sign extended.
 * @note If @a b_size is less than @a r_size, @a b will be sign extended.
 * @note If @a a_size or @a b_size is smaller than @a r_size, then @a a or @a b will be truncated.
 * @param r The result.
 * @param r_size Size of @a r.
 * @param a The left hand side
 * @param a_size Size of @a a.
 * @param b The right hand side
 * @param b_size Size of @b b.
 * @param c Carry input
 * @return Carry output
 */
fn wide_add(r : span[__builtin_limb], a : span[__builtin_limb], b : span[__builtin_limb], c : __builtin_u1 = 0)
{
    let a_sign = wide_sign(a)
    let b_sign = wide_sign(b)

    var i = 0 : __builtin_size
    while (i != __builtin_min(r.size(), a.size(), b.size())) {
        r.unsafe()[i], c = __builtin_add_carry(a.unsafe()[i], b.unsafe()[i], c)
        ++i
    }

    while (i != __builtin_min(r.size(), b.size())) {
        r.unsafe()[i], c = __builtin_add_carry(a_sign, b.unsafe()[i], c)
        ++i
    }

    // less-than check because b might be larger than a.
    while (i < __builtin_min(r.size(), a.size())) {
        r.unsafe()[i], c = __builtin_add_carry(a.unsafe()[i], b_sign, c)
        ++i
    }

    while (i != r.size()) {
        r.unsafe()[i], c = __builtin_add_carry(a_sign, b_sign, c)
        ++i
    }
}

/** Subtract two signed wide integers from each other.
 *
 * @note If @a a_size is less than @a r_size, @a a will be sign extended.
 * @note If @a b_size is less than @a r_size, @a b will be sign extended.
 * @note If @a a_size or @a b_size is smaller than @a r_size, then @a a or @a b will be truncated.
 * @param r The result.
 * @param r_size Size of @a r.
 * @param a The left hand side
 * @param a_size Size of @a a.
 * @param b The right hand side
 * @param b_size Size of @b b.
 * @param c Borrow input
 */
fn wide_sub(r : span[__builtin_limb], a : span[__builtin_limb], b : span[__builtin_limb], c : __builtin_u1 = 0)
{
    let a_sign = wide_sign(a)
    let b_sign = wide_sign(b)

    var i = 0 : __builtin_size
    while (i != __builtin_min(r.size(), a.size(), b.size())) {
        r.unsafe()[i], c = __builtin_sub_carry(a..unsafe()[i], b.unsafe()[i], c)
        ++i
    }

    while (i != __builtin_min(r.size(), b.size())) {
        r.unsafe()[i], c = __builtin_sub_carry(a_sign, b.unsafe()[i], c)
        ++i
    }

    // less-than check because b might be larger than a.
    while (i < __builtin_min(r.size(), a.size())) {
        r.unsafe()[i], c = __builtin_sub_carry(a.unsafe()[i], b_sign, c)
        ++i
    }

    while (i != r.size()) {
        r.unsafe()[i], c = __builtin_sub_carry(a_sign, b_sign, c)
        ++i
    }
}

/** Helper for wide_cmp().
 */
fn wide_cmp_limb(a : __builtin_limb, b : __builtin_limb, sign : __builtin_limb) -> __builtin_i8
{
    if (a == b) {
        return 0
    } else if (a < b) {
        return if (sign == 0) { -1 } else { 1 }
    } else {
        return if (sign == 0) { 1 } else { -1 }
    }
}

/** Compare two signed wide integers to each other.
 *
 * @note If @a a_size is less than @a r_size, @a a will be sign extended.
 * @note If @a b_size is less than @a r_size, @a b will be sign extended.
 * @note If @a a_size or @a b_size is smaller than @a r_size, then @a a or @a b will be truncated.
 * @param a The left hand side
 * @param a_size Size of @a a.
 * @param b The right hand side
 * @param b_size Size of @b b.
 * @return -1: a < b, 0: a == b, 1: a > b
 */
fn wide_cmp(a : span[__builtin_limb], b : span[__builtin_limb]) -> __builtin_i8
{
    let a_sign = wide_sign(a)
    let b_sign = wide_sign(b)

    if (a_sign != b_sign) {
        return if (a_sign == 0) { 1 } else { -1 }
    }

    let sign = a_sign
    var i = 0 : __builtin_size
    if (a.size() > b.size()) {
        for (i = a.size(); i != b.size(); --i) {
            if (let r = wide_cmp_limb(a.unsafe()[i - 1], sign, sign); r != 0) {
                return r
            }
        }
    } else {
        for (i = b.size(); i != a.size(); --i) {
            if (let r = wide_cmp_limb(sign, b.unsafe()[i - 1], sign); r != 0) {
                return r
            }
        }
    }

    while (i != 0) {
        if (let r = wide_cmp_limb(a.unsafe()[i - 1], b.unsafe()[i - 1], sign); r != 0) {
            return r
        }
        --i
    }

    return 0
}

fn wide_mul(r : span[__builtin_limb], var a : span[__builtin_limb], var b : span[__builtin_limb])
{
    // With multiplication a smaller second operand is better.
    if (b.size() > a.size()) {
        swap(a, b)
    }

    // Since we are doing positive multiplication, r needs to be zero.
    wide_zero(r)

    let a_sign = wide_sign(a)
    let b_sign = wide_sign(b)
    var b_tmp_c = b_sign != 0
    for (var b_i = 0 : __builtin_size; b_i != b.size(); ++b_i) {
        var b_tmp, b_tmp_c = __builtin_add_carry(b.unsafe()[b_i] ^ b_sign, 0, b_tmp_c)

        var r_i = b_i
        var mul_carry = 0 : __builtin_limb
        var a_tmp_c = a_sign != 0
        for (var a_i = 0 : __builtin_size; a_i != a_size; ++a_i) {
            var a_tmp, a_tmp_c = __builtin_add_carry(a.unsafe()[a_i] ^ a_sign, 0, a_tmp_c)
            r.unsafe()[r_i], mul_carry = __builtin_fma(a_tmp, b_tmp, r.unsafe()[r_i], mul_carry)
            ++r_i
        }

        // Carry chain one further into the accumulator.
        // Since the limbs in the accumulator register has not gone this far
        // we do not need to ripple carry.
        if (r_i < r_size) {
            r.unsafe()[r_i] = mul_carry
        }
    }

    if (a_sign != b_sign) {
        wide_neg(r, r)
    }
}

fn wide_div_zero(
    let rd : raw_ptr[__builtin_limb],
    let rd_size : __builtin_size,
    let rm : raw_ptr[__builtin_limb],
    let rm_size : __builtin_size,
    var b : raw_ptr[__builtin_limb],
    var b_size : __builtin_size)
{
    for (var i = 0 : __builtin_size; i != rd_size; ++i) {
        rd[0] = 0
    }
    for (var i = 0 : __builtin_size; i != rm_size; ++i) {
        rm[0] = 0
    }
}

fn wide_div_fast(
    let rd : raw_ptr[__builtin_limb],
    let rd_size : __builtin_size,
    let rm : raw_ptr[__builtin_limb],
    let rm_size : __builtin_size,
    var a : raw_ptr[__builtin_limb],
    var a_size : __builtin_size,
    var b : raw_ptr[__builtin_limb],
    var b_size : __builtin_size)
{
    rd[0], rm[0] = __builtin_idivmod(a[0], b[0])

    let rd_sign = __builtin_sra(rd[0], sizeof(__builtin_limb) * 8 - 1)
    for (var i = 1 : __builtin_size; i != rd_size; ++i) {
        rd[i] = rd_sign
    }

    let rm_sign = __builtin_sra(rm[0], sizeof(__builtin_limb) * 8 - 1)
    for (var i = 1 : __builtin_size; i != rm_size; ++i) {
        rd[i] = rm_sign
    }
}

fn wide_div_slow(
    let rd : raw_ptr[__builtin_limb],
    let rd_size : __builtin_size,
    let rm : raw_ptr[__builtin_limb],
    let rm_size : __builtin_size,
    var a : raw_ptr[__builtin_limb],
    var a_size : __builtin_size,
    var b : raw_ptr[__builtin_limb],
    var b_size : __builtin_size)
{
    let limb_width = sizeof(__builtin_limb) * 8
    let a_sign = wide_sign(a, a_size)
    let b_sign = wide_sign(b, b_size)

    wide_make_zero(rd, rd_size)
    wide_make_zero(rm, rm_size)

    if (a_sign) {
        wide_neg(a, a_size)
    }
    if (b_sign) {
        wide_neg(b, b_size)
    }

    for (var i = a_size * limb_width; i != 0; --i) {
        let bit = wide_get_bit(a, a_size, i - 1)
        wide_inplace_sll_one(rm, rm_size, bit)

        if (wide_cmp(rm, rm_size, b, b_size) >= 0) {
            wide_sub(rm, rm_size, rm, rm_size, b, b_size)
            wide_set_bit(rd, rd_size, i - 1, 1)
        }
    }

    if (a_sign != b_sign) {
        wide_neg(rd, rd_size)
    }
    if (a_sign) {
        wide_neg(a, a_size)
    }
    if (b_sign) {
        wide_neg(b, b_size)
    }
}

fn wide_div(
    let rd : raw_ptr[__builtin_limb],
    let rd_size : __builtin_size,
    let rm : raw_ptr[__builtin_limb],
    let rm_size : __builtin_size,
    var a : raw_ptr[__builtin_limb],
    var a_size : __builtin_size,
    var b : raw_ptr[__builtin_limb],
    var b_size : __builtin_size)
    -> __builtin_u1
{
    if (wide_is_zero(b, b_size)) {
        return 1
    }
    
    if (wide_is_zero(a, a_size)) {
        wide_div_zero(rd, rd_size, rm, rm_size, b, b_size)
    } else if (b_size == 1 and a_size == 1) {
        wide_div_fast(rd, rd_size, rm, rm_size, a, a_size, b, b_size)
    } else {
        wide_div_slow(rd, rd_size, rm, rm_size, a, a_size, b, b_size)
    }
    return 0
}
